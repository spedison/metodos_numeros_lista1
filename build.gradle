import java.nio.file.Paths

plugins {
    id 'java'
    id 'application'
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(22))
}

repositories {
    mavenCentral()
}

group = 'br.com.spedison'
version = '1.0-SNAPSHOT'

dependencies {
    implementation 'org.apache.commons:commons-pool2:2.12.0'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-jcs3-jcache:3.2'
    implementation 'org.apache.commons:commons-imaging:1.0.0-alpha5'
    implementation 'org.apache.commons:commons-email:1.5'
    implementation 'org.apache.commons:commons-csv:1.12.0'
    implementation 'org.apache.commons:commons-crypto:1.2.0'
    implementation 'org.apache.commons:commons-configuration2:2.11.0'
    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

test {
    useJUnitPlatform()
}

tasks.register('generateData', JavaExec) {
    group = 'Relatorio'
    dependsOn(build)
    description = 'Executa o programa Java para gerar os dados CSV'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'br.com.spedison.Main'
    // ‚úÖ Par√¢metros fixos definidos diretamente no Gradle
    args './dados/input.csv', '1.7'

    // üõ†Ô∏è Corrigido para refletir o caminho real
    outputs.file("$project.projectDir/dados/input.csv")
}

tasks.register('plotGraph', Exec) {
    group = 'relatorio'
    description = 'Gera gr√°fico com Gnuplot'
    // dependsOn 'generateData'
    workingDir = project.projectDir
    commandLine '/usr/bin/gnuplot', './grafico/exercicios.gnuplot'

    // Ajuda o Gradle a saber que precisa gerar esse arquivo
    inputs.file("$project.projectDir/grafico/exercicios.gnuplot")

    inputs.file("$project.projectDir/dados/exercicio1.csv")
    inputs.file("$project.projectDir/grafico/exercicio1.gnuplot")
    outputs.file("$project.projectDir/dados/exercicio1.png")

    inputs.file("$project.projectDir/dados/exercicio3.csv")
    inputs.file("$project.projectDir/grafico/exercicio3.gnuplot")
    outputs.file("$project.projectDir/dados/exercicio3.png")

}

tasks.register('compileLatexOnly', Exec) {

    group = 'relatorio'
    description = 'Compila o LaTeX Completamente'

    def latexCommand = project.findProperty('latexCommand') ?: '/usr/bin/latexmk'

    onlyIf {
        file(latexCommand).exists()
    }

    workingDir = file("${projectDir}/latex")

    commandLine latexCommand, '-pdf', '-bibtex', 'relatorio.tex'

    // Declara depend√™ncia expl√≠cita do gr√°fico e todos arquivo de Artigo.
    inputs.file("$project.projectDir/dados/exercicio1.png")
    inputs.file("$project.projectDir/latex/relatorio.tex")
    inputs.file("$project.projectDir/latex/capitulo_abstract.tex")
    inputs.file("$project.projectDir/latex/Exercicio-1.tex")
    inputs.file("$project.projectDir/latex/Exercicio-1-Resultado.tex")
    inputs.file("$project.projectDir/latex/Exercicio-2.tex")
    inputs.file("$project.projectDir/latex/Exercicio-2-Resultado.tex")
    inputs.file("$project.projectDir/latex/Exercicio-3.tex")
    inputs.file("$project.projectDir/latex/Exercicio-3-Resultado.tex")
    inputs.file("$project.projectDir/latex/comparacao_exercicio2.tex")
    inputs.file("$project.projectDir/latex/comparacao_exercicio3.tex")
    inputs.file("$project.projectDir/latex/comparacao_exercicio4.tex")
    inputs.file("$project.projectDir/latex/referencias.bib")
    inputs.file("$project.projectDir/dados/exercicio1.png")
    inputs.file("$project.projectDir/dados/exercicio3.png")
    inputs.file("$project.projectDir/latex/imagens/exercicio3_parte_1.jpg")
    inputs.file("$project.projectDir/latex/Exercicio-4.tex")
    inputs.file("$project.projectDir/latex/Exercicio-4-Resultado.tex")
    inputs.file("$project.projectDir/latex/conclusao.tex")
    inputs.file("$project.projectDir/latex/tabela_residuos_exercicio3.tex")



    outputs.file("$project.projectDir/latex/relatorio.pdf")
}


tasks.register('compileLatex', Exec) {

        group = 'relatorio'
        description = 'Compila o LaTeX Completamente'

        def latexCommand = project.findProperty('latexCommand') ?: '/usr/bin/latexmk'

        onlyIf {
            file(latexCommand).exists()
        }

        dependsOn 'plotGraph'
        workingDir = file("${projectDir}/latex")

        commandLine latexCommand, '-pdf', 'relatorio.tex'

        // Declara depend√™ncia expl√≠cita do gr√°fico e todos arquivo de Artigo.
        //inputs.file("$project.projectDir/dados/grafico.jpg")
        inputs.file("$project.projectDir/latex/relatorio.tex")
        inputs.file("$project.projectDir/latex/capitulo_abstract.tex")
        inputs.file("$project.projectDir/latex/conclusao.tex")
        inputs.file("$project.projectDir/latex/fundamentacao.tex")
        inputs.file("$project.projectDir/latex/Exercicio-1.tex")
        inputs.file("$project.projectDir/latex/metodologia.tex")
        inputs.file("$project.projectDir/latex/resultados.tex")
        inputs.file("$project.projectDir/latex/referencias.bib")

        outputs.file("$project.projectDir/latex/relatorio.pdf")
}



tasks.register("limpaDadosLatex", Exec) {
    group = "relatorio"
    description = "Executa latexmk para limpar os arquivos tempor√°rios"

    executable = "/usr/bin/latexmk" // substitua pelo nome do execut√°vel, ex: "python" ou "java"
    args = ["-C", "relatorio"] // substitua pelos argumentos desejados

    workingDir = file("$projectDir/latex") // define o diret√≥rio onde o processo ser√° executado
}

tasks.register('limparDados') {
    group = 'relatorio'
    description = 'Remove completamente o diret√≥rio dados/ e os arquivos ...'

    // Define que esta task ser√° seguida por runExternalProgram
    dependsOn 'limpaDadosLatex'

    doLast {

        def dadosDir = file("${project.projectDir}/dados")
        if (dadosDir.exists()) {
            println "Apagando diret√≥rio: ${dadosDir}"
            delete dadosDir
            println "Apagado diret√≥rio: ${dadosDir}"
            mkdir(dadosDir)
        } else {
            println "Diret√≥rio dados j√° n√£o existe. Nada a remover."
        }

        def bblDir = file("${project.projectDir}/latex")

        if (bblDir.exists()) {
            def arquivosBBL = bblDir.listFiles().findAll { it.name.endsWith('.bbl') }
            if (arquivosBBL) {
                println "Apagando arquivos .bbl encontrados em ${bblDir}:"
                arquivosBBL.each { file ->
                    println " - ${file.name}"
                    file.delete()
                }
            } else {
                println "Nenhum arquivo .bbl encontrado em ${dadosDir}."
            }
        } else {
            println "Diret√≥rio ${bblDir} n√£o existe."
        }
    }
}

// Garante que 'limparDados' sempre roda ap√≥s 'clean'
tasks.named('clean').configure {
    finalizedBy('limparDados')
}